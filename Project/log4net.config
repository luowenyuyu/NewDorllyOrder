<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  <!--初始化-->
  <configSections>
    <section name="log4net" type="log4net.Config.Log4NetConfigurationSectionHandler,log4net"/>
  </configSections>
  <!--主体配置-->
  <log4net>
    <!--文件打印配置-->
    <appender name="RollingLogFileAppender" type="log4net.Appender.RollingFileAppender">
      <!--路径-->
      <param name="File" value="log\"/>
      <!--文件名格式-->
      <param name= "DatePattern" value= "yyyyMMdd&quot;.log&quot;"/>
      <!--是否向文件中追加日志-->
      <param name="AppendToFile" value="true"/>
      <!--日志文件名是否是固定不变的-->
      <param name= "StaticLogFileName" value= "false"/>
      <!--最多产生的日志文件数，超过则只保留最新的n个。设定值value="-1"为不限文件数-->
      <param name="MaxSizeRollBackups" value="10"/>
      <!--按照何种方式产生多个日志文件(日期[Date],文件大小[Size],混合[Composite])-->
      <param name="RollingStyle" value="Composite" />
      <!--文件大小，只在混合与文件方式下使用。超出后在所有文件名后自动增加正整数重新命名。可用的单位:KB|MB|GB。不要使用小数-->
      <param name="maximumFileSize" value="20MB" />
      <layout type="log4net.Layout.PatternLayout">
        <!--
        %m(message):输出的日志消息
        %n(new line)：換行
        %d(datetime):输出当前语句运行的时刻
        %r(run time):输出程序从运行到执行到当前语句时消耗的毫秒数
        %t(thread id):当前语句所在的线程ID
        %p(priority): 日志的当前优先级别，即DEBUG、INFO、WARN…等
        %c(class):当前日志对象的名称
        %L：输出语句所在的行号
        %F：输出语句所在的文件名
        %-数字：表示该项的最小长度，如果不够，则用空格填充
        %l: 输出日志事件的发生位置，相当于%C.%M(%F:%L)的组合,包括类目名、发生的线程，以及在代码中的行数
        %x: 输出和当前线程相关联的NDC(嵌套诊断环境),尤其用到像java servlets这样的多客户多线程的应用中
        -->
        <param name="ConversionPattern" value="[%d] %-5p - %m%n" />
      </layout>
      <!--记录日志写入文件时，不锁定文本文件，防止多线程时不能写Log,官方说线程非安全-->
      <!--<lockingModel type="log4net.Appender.FileAppender+MinimalLock" />-->
    </appender>
    <root>
      <level value="all"/>
      <appender-ref ref="RollingLogFileAppender"/>
    </root>
  </log4net>
</configuration>